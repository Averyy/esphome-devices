# this is a test config i'm using for calibration and testing the esp32c3 mini

substitutions:
    device_name: propane-angle-sensor-c3
    friendly_name: Propane Angle Sensor C3

# external_components:
#   - source: github://Averyy/esphome-custom-components
#     components: [notecard]

packages:
    # Select ESP32 Board:
    # device_base: !include common/device_esp32dev.yaml
    device_base: !include common/device_esp32c3_mini.yaml
    # device_base: !include common/device_esp32c6_firebeetle.yaml

    # Optional Features:
    # mosfet_control: !include common/mosfet_control.yaml #mosfet_pin on at boot, off at sleep
    # firestore_setup: !include common/firestore_setup.yaml #firebase globals and http
    # wifi: !include common/wifi.yaml

# output:
#   - platform: gpio
#     pin: GPIO4
#     id: mosfet_pin

# Notecard configuration
# notecard:
#   id: notecard_component
#   uart_id: uart_notecard
#   project_id: !secret notecard_project_id
#   sync_interval: 48h
#   org: !secret notecard_org

# uart:
#   id: uart_notecard
#   tx_pin: GPIO21
#   rx_pin: GPIO20
#   baud_rate: 9600

# Magnetic hall effect sensor configuration

i2c:
    sda: GPIO6
    scl: GPIO7
    scan: true

as5600:
    id: my_as5600
    direction: counterclockwise # if DIR Soldered directly to 3.3V (for counterclockwise) then this is not needed. For normal clockwise it should be soldered to GND.
    dir_pin: GPIO3
    power_mode: low3

sensor:
    - platform: as5600
      as5600_id: my_as5600
      name: "Angle"
      update_interval: 1s
      id: position
      filters:
          - lambda: "return x * 360.0 / 4096.0;"
          - sliding_window_moving_average:
                window_size: 3
                send_every: 3
                send_first_at: 3
      # on_value:
      #   then:
      #     - lambda: |-
      #         // Get values from Notecard
      #         float temperature = id(notecard_component).get_notecard_temperature();
      #         float battery_voltage = id(notecard_component).get_notecard_battery_voltage();

      #         // Create JSON with all values
      #         std::string json = "{";
      #         json += "\"angle\":" + to_string(x);
      #         json += ",\"temperature\":" + to_string(temperature);
      #         json += ",\"batteryVoltage\":" + to_string(battery_voltage);
      #         json += "}";

      #         ESP_LOGD("main", "Raw json: %s", json.c_str());

      #         bool success = id(notecard_component).send_data(json);
      #         ESP_LOGD("main", "Data send %s, going to sleep in 1s...", success ? "successful" : "failed");
      #         delay(1000);  // Give time for Notecard communication to complete
      #     - deep_sleep.enter: deep_sleep_mode

# Deep sleep configuration
deep_sleep:
    id: deep_sleep_mode
    run_duration: 5min #this will cause the device to goto sleep if something stalls or fails
    sleep_duration: 8h
